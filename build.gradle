plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'war'
    id "com.github.node-gradle.node" version "3.1.1"
}

node {
    download = true
    version = "22.13.1"
    npmVersion = "10.9.2"
    distBaseUrl = "https://nodejs.org/dist"
    workDir = file("${project.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${project.projectDir}/.gradle/npm")
    nodeProjectDir = file('./frontend')
}

task setUp(type: com.github.gradle.node.npm.task.NpmTask) {
    description = "Install Node.js Packages"
    workingDir = file("${project.projectDir}/frontend")
    args = ['install']

    execOverrides {
        it.executable = file("${project.projectDir}/.gradle/npm/npm-v10.9.2/npm.cmd").absolutePath
        it.environment("PATH", "${node.workDir}/node-v22.13.1-win-x64/bin;" + System.getenv("PATH"))
    }
}

task buildFrontEnd(type: com.github.gradle.node.npm.task.NpmTask) {
    description = "Build the frontend using npm"
    workingDir = file("${project.projectDir}/frontend")
    args = ['run', 'build']

    execOverrides {
        it.executable = file("${project.projectDir}/.gradle/npm/npm-v10.9.2/npm.cmd").absolutePath
        it.environment("PATH", "${node.workDir}/node-v22.13.1-win-x64/bin;" + System.getenv("PATH"))
    }
}

processResources.dependsOn 'buildFrontEnd'

sourceSets {
    main {
		resources {
			srcDir './src/resources/static'
				}    
         }
	}

apply plugin: 'war'
bootWar {
    archiveBaseName = '-'
    archiveFileName = 'MyApp.war'
    archiveVersion = "1.0.0"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 처리 (Jackson 사용)
}

tasks.named('test') {
	useJUnitPlatform()
}