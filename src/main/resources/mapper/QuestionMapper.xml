<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.example.board.boundedContext.question.QuestionMapper">

	<!-- Question 매핑 -->
	<resultMap id="QuestionResultMap"
		type="com.example.board.boundedContext.question.Question">
		<id property="id" column="id" />
		<result property="parentId" column="parent_id" />
		<result property="depth" column="depth" />
		<result property="subject" column="subject" />
		<result property="content" column="content" />
		<result property="createDate" column="create_date" />
		<result property="updateDate" column="update_date" />

		<!-- author (SiteUser) 매핑 -->
		<association property="author"
			javaType="com.example.board.boundedContext.user.SiteUser">
			<id property="id" column="author_id" />
			<result property="username" column="author_username" />
			<result property="email" column="author_email" />
		</association>
	</resultMap>

	<!-- 특정 질문 조회 (ID로 찾기) -->
	<select id="findById" parameterType="int"
		resultMap="QuestionResultMap">
		SELECT
		q.id, q.parent_id, q.depth, q.subject, q.content,
		q.create_date,
		q.update_date,
		u.id AS author_id, u.username AS
		author_username, u.email AS author_email
		FROM question q
		LEFT JOIN
		site_user u ON q.author_id = u.id
		WHERE q.id = #{id}
	</select>

	<!-- 댓글/대댓글 조회 (부모 ID & depth 기준) -->
	<select id="findByParentIdAndDepth"
		resultMap="QuestionResultMap">
		SELECT
		q.id, q.parent_id, q.depth, q.subject, q.content,
		q.create_date,
		q.update_date,
		u.id AS author_id, u.username AS
		author_username, u.email AS author_email
		FROM question q
		LEFT JOIN
		site_user u ON q.author_id = u.id
		WHERE q.parent_id = #{parentId}
		AND
		q.depth = #{depth}
		ORDER BY q.create_date ASC
	</select>

	<!-- 질문 삽입 -->
	<insert id="insertQuestion"
		parameterType="com.example.board.boundedContext.question.Question"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO question (parent_id,
		depth, subject, content, author_id,
		create_date, update_date)
		VALUES
		(#{parentId}, #{depth}, #{subject}, #{content}, #{author.id},
		#{createDate}, #{updateDate})
	</insert>

	<!-- 질문 수정 -->
	<update id="updateQuestion"
		parameterType="com.example.board.boundedContext.question.Question">
		UPDATE question
		SET subject = #{subject}, content =
		#{content}, update_date =
		#{updateDate}
		WHERE id = #{id}
	</update>

	<!-- 질문 삭제 -->
	<delete id="deleteQuestion" parameterType="int">
		DELETE FROM question
		WHERE id = #{id}
	</delete>

	<!-- 질문 목록 조회 (페이징 + 검색) -->
	<select id="findAllWithKw" resultMap="QuestionResultMap">
		SELECT
		q.id, q.parent_id, q.depth, q.subject, q.content, q.create_date,
		q.update_date,
		u.id AS author_id, u.username AS author_username,
		u.email AS author_email
		FROM question q
		LEFT JOIN site_user u ON
		q.author_id = u.id
		<choose>
			<when test="kw != null and kw != ''">
				-- 질문의 제목이나 내용에 검색어가 포함된 경우
				WHERE (q.subject LIKE
				CONCAT('%', #{kw}, '%')
				OR q.content LIKE CONCAT('%', #{kw}, '%')
				OR
				EXISTS (
				-- 답변의 내용에 검색어가 포함된 경우
				SELECT 1 FROM question c
				WHERE
				c.parent_id = q.id
				AND c.depth > 0
				AND c.content LIKE CONCAT('%',
				#{kw}, '%')
				))
			</when>
			<otherwise>
				WHERE q.depth = 0  <!-- 질문만 조회 -->
			</otherwise>
		</choose>
		ORDER BY q.create_date DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>


	<!-- 부모 ID와 depth로 질문 조회 (댓글/대댓글 조회) -->
	<select id="findFirstByIdAndDepth" resultMap="QuestionResultMap">
		SELECT
		q.id,
		q.parent_id, q.depth, q.subject, q.content, q.create_date,
		q.update_date,
		u.id AS author_id, u.username AS author_username,
		u.email AS author_email
		FROM question q
		LEFT JOIN site_user u ON
		q.author_id = u.id
		WHERE q.id = #{id} AND q.depth = #{depth}
		ORDER BY
		q.create_date ASC
	</select>

	<!-- 댓글 수정 -->
	<update id="updateAnswer"
		parameterType="com.example.board.boundedContext.question.Question">
		UPDATE question
		SET content = #{content}, update_date =
		NOW()
		WHERE id = #{id}
	</update>

	<!-- 질문 목록 조회 (페이징) -->
	<select id="findAll" resultMap="QuestionResultMap">
		SELECT
		q.id, q.parent_id, q.depth, q.subject, q.content, q.create_date,
		q.update_date,
		u.id AS author_id, u.username AS author_username,
		u.email AS author_email
		FROM question q
		LEFT JOIN site_user u ON
		q.author_id = u.id
		WHERE q.depth = 0  <!-- depth=0인 질문만 가져오기 -->
		ORDER BY q.create_date DESC
		LIMIT #{limit} OFFSET #{offset}  <!-- LIMIT과 OFFSET을 
			사용하여 페이징 처리 -->
	</select>
	<!-- 전체 질문 개수 조회 -->
	<select id="countAll" resultType="int">
		SELECT COUNT(*)
		FROM question q
		WHERE q.depth = 0  <!-- depth=0인 질문만 카운트 -->
	</select>

	<!-- QuestionMapper.xml -->
	<select id="countAllWithKw" resultType="int">
		SELECT COUNT(*)
		FROM question q
		LEFT JOIN site_user u ON q.author_id = u.id
		<choose>
			<when test="kw != null and kw != ''">
				-- 질문 제목이나 내용, 또는 답변 내용에 검색어가 포함된 경우
				WHERE (q.subject LIKE CONCAT('%', #{kw}, '%')
				OR q.content LIKE CONCAT('%', #{kw}, '%')
				OR EXISTS (
				SELECT 1 FROM question c
				WHERE c.parent_id = q.id
				AND c.depth > 0
				AND c.content LIKE CONCAT('%', #{kw}, '%')
				))
			</when>
			<otherwise>
				WHERE q.depth = 0  <!-- 질문만 조회 -->
			</otherwise>
		</choose>
	</select>


</mapper>
